@startuml
skinparam classAttributeIconSize 0
skinparam classFontSize 11
skinparam classAttributeFontSize 10
skinparam classMethodFontSize 10
hide empty methods

'=====================================
' Core Classes
'=====================================

class EEGAnalyzer {
  - analyzer_name: str
  - description: str
  - derivatives_path: str
  - datasets: Dict[str, Dataset]
  - df: pd.DataFrame
  + create_dataframe(): pd.DataFrame
  + save_analyzer(filename: str): None
  + load_analyzer(analyzer_name: str): EEGAnalyzer
}

class Dataset {
  - name: str
  - f_name: str
  - tasks: List[str]
  - states: List[str]
  - task_orientation: str
  - subjects: Dict[str, Subject]
  + load_subjects(): None
  + to_long_band_power_list(): List[dict]
}

class Subject {
  - id: str
  - group: str
  - recordings: Dict[int, Recording]
  + load_data(variant: str, band: tuple): None
}

class Recording {
  - session_id: int
  - psd_map: Dict[str, Dict[str, np.ndarray]]
  - band_power_map: Dict[str, Dict[str, np.ndarray]]
  - log_band_power_map: Dict[str, Dict[str, np.ndarray]]
  - outlier_mask_map: Dict[str, Dict[str, np.ndarray]]
  - meta_map: Dict[str, Dict[str, dict]]
  - freq_map: Dict[str, Dict[str, np.ndarray]]
  - band_power_stats: BandPowerStats
  - exclude: bool
  + calculate_band_power(band: tuple): None
  + get_band_power(task, state): np.ndarray
  + get_log_band_power(task, state): np.ndarray
  + get_outlier_mask(task, state): np.ndarray
}

class BandPowerStats {
  - channels: List[str]
  - stats: StatsRoot
  + calculate_all_stats(...): None
  + get_stat(...): Any
}

'=====================================
' Stats Dictionary Breakdown (Fixed)
'=====================================

package "BandPowerStats → stats structure" {
  class StatsRoot {
    + band_power: StatScope
    + log_band_power: StatScope
  }

  class StatScope {
    + all_data: StatLevel
    + by_state: Dict[str → StatLevel]
    + by_condition: Dict[(task, state) → StatLevel]
  }

  class StatLevel {
    + filtered: Dict[channel → StatValues]
    + unfiltered: Dict[channel → StatValues]
  }

  class StatValues {
    + mean: float
    + variance: float
    + std_error: float
    + iqr: float
    + skewness: float
    + kurtosis: float
    + mode: float
    + is_normal: bool
    + epoch_count: int
  }

  StatsRoot *-- StatScope : band_power/log_band_power
  StatScope *-- StatLevel : scopes
  StatLevel *-- StatValues : per channel
}

'=====================================
' Relationships
'=====================================

EEGAnalyzer "1" *-- "1..*" Dataset
Dataset "1" *-- "1..*" Subject
Subject "1" *-- "1..*" Recording
Recording "1" o-- "1" BandPowerStats
BandPowerStats *-- StatsRoot : stats

'=====================================
' Iterator Interfaces
'=====================================

EEGAnalyzer ..|> Iterable
Dataset ..|> Iterable
Subject ..|> Iterable
Recording ..|> Iterable

note right of Recording::band_power_map
  Shape: (epochs, channels)
end note

note right of BandPowerStats::stats
  Dict[data_type][scope][key][filter][channel] = stat_dict
end note

note right of StatValues
  Stats computed per channel across epochs
end note

@enduml
